{"version":3,"sources":["views/Index.jsx","App.js","index.js"],"names":["Index","React","useState","gpx","setGPX","Math","random","key","setKey","loading","setLoading","bounds","setBounds","seconds","setSeconds","meters","setMeters","stayPoints","setStayPoints","useEffect","min","tracks","points","map","point","lat","lon","max","style","padding","container","direction","justify","alignItems","spacing","item","variant","title","type","accept","onChange","e","file","target","files","fileReader","FileReader","onload","content","result","gpxParser","GPXParser","parse","readAsText","console","log","fullWidth","value","endAdornment","position","size","onClick","getStayPoints","startIcon","color","disabled","length","metadata","name","MapContainer","scrollWheelZoom","whenReady","TileLayer","attribution","url","Polyline","pathOptions","positions","track","Circle","center","radius","Tooltip","moment","arv","format","lev","utc","duration","asMilliseconds","haversine","p1","p2","toRad","x","PI","lat1","latitude","lng1","longitude","lng","lat2","lng2","latd","lngd","f","pow","sin","cos","atan2","sqrt","i","j","Date","time","pts","slice","push","reduce","acc","val","App","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.fd276903.chunk.js","sourcesContent":["import React from 'react'\nimport * as Mui from '@material-ui/core'\nimport * as GPXParser from 'gpxparser'\nimport SearchIcon from '@material-ui/icons/Search'\nimport moment from 'moment'\nimport { MapContainer, TileLayer, Polyline, Circle, Tooltip } from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css'\n\nexport default function Index() {\n\tconst [gpx, setGPX] = React.useState()\n\tconst [key, setKey] = React.useState(Math.random())\n\tconst [loading, setLoading] = React.useState(false)\n\tconst [bounds, setBounds] = React.useState([\n\t\t[0, 0],\n\t\t[0, 0],\n\t])\n\n\tconst [seconds, setSeconds] = React.useState(60)\n\tconst [meters, setMeters] = React.useState(100)\n\tconst [stayPoints, setStayPoints] = React.useState(null)\n\n\tconst handleFileLoad = (e) => {\n\t\ttry {\n\t\t\tconst file = e.target.files[0]\n\t\t\tconst fileReader = new FileReader()\n\n\t\t\tfileReader.onload = (e) => {\n\t\t\t\tsetStayPoints(null)\n\n\t\t\t\tconst content = e.target.result\n\t\t\t\tconst gpxParser = new GPXParser()\n\t\t\t\tgpxParser.parse(content)\n\n\t\t\t\tsetGPX(gpxParser)\n\t\t\t\tsetKey(Math.random())\n\t\t\t}\n\n\t\t\tfileReader.readAsText(file)\n\t\t} catch (e) {\n\t\t\tconsole.log(e)\n\t\t}\n\t}\n\n\tReact.useEffect(() => {\n\t\tif (gpx) {\n\t\t\tsetBounds([\n\t\t\t\t[Math.min(...gpx.tracks[0].points.map((point) => point.lat)), Math.min(...gpx.tracks[0].points.map((point) => point.lon))],\n\t\t\t\t[Math.max(...gpx.tracks[0].points.map((point) => point.lat)), Math.max(...gpx.tracks[0].points.map((point) => point.lon))],\n\t\t\t])\n\t\t}\n\t}, [gpx, key])\n\n\treturn (\n\t\t<Mui.Grid style={{ padding: 20 }} container direction=\"column\" justify=\"flex-end\" alignItems=\"center\" spacing={3}>\n\t\t\t<Mui.Grid item>\n\t\t\t\t<Mui.Typography variant=\"body1\">\n\t\t\t\t\tGeospatial Data Management 2020/2021, project 1<br />\n\t\t\t\t\tAlfonso Adduci (mat. 908977)\n\t\t\t\t</Mui.Typography>\n\t\t\t</Mui.Grid>\n\n\t\t\t<Mui.Grid item>\n\t\t\t\t<Mui.Typography variant=\"h3\">StayPoints</Mui.Typography>\n\t\t\t</Mui.Grid>\n\n\t\t\t<Mui.Grid item>\n\t\t\t\t<Mui.Card>\n\t\t\t\t\t<Mui.CardHeader title={'Load a GPX file'} />\n\t\t\t\t\t<Mui.CardContent>\n\t\t\t\t\t\t<input type=\"file\" accept=\".gpx\" onChange={handleFileLoad}></input>\n\t\t\t\t\t</Mui.CardContent>\n\t\t\t\t\t<Mui.CardActions></Mui.CardActions>\n\t\t\t\t</Mui.Card>\n\t\t\t</Mui.Grid>\n\n\t\t\t{gpx?.tracks[0] && (\n\t\t\t\t<Mui.Grid item>\n\t\t\t\t\t<Mui.Card>\n\t\t\t\t\t\t<Mui.CardHeader title={'StayPoints detection'} />\n\t\t\t\t\t\t<Mui.CardContent>\n\t\t\t\t\t\t\tStops for at least{' '}\n\t\t\t\t\t\t\t<Mui.Input\n\t\t\t\t\t\t\t\t// label=\"Number\"\n\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\tvalue={seconds}\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tsetStayPoints(null)\n\t\t\t\t\t\t\t\t\tsetSeconds(e.target.value)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tendAdornment={<Mui.InputAdornment position=\"end\">seconds</Mui.InputAdornment>}\n\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t// variant=\"outlined\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\tin a circle of radius\n\t\t\t\t\t\t\t<Mui.Input\n\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\tvalue={meters}\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tsetStayPoints(null)\n\t\t\t\t\t\t\t\t\tsetMeters(e.target.value)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tendAdornment={<Mui.InputAdornment position=\"end\">meters</Mui.InputAdornment>}\n\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t// variant=\"outlined\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Mui.CardContent>\n\t\t\t\t\t\t<Mui.CardActions>\n\t\t\t\t\t\t\t<Mui.Button\n\t\t\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\t\t\tsetLoading(true)\n\n\t\t\t\t\t\t\t\t\tsetStayPoints(getStayPoints(gpx.tracks[0].points, meters, seconds))\n\t\t\t\t\t\t\t\t\tsetKey(Math.random())\n\n\t\t\t\t\t\t\t\t\tsetLoading(false)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tstartIcon={<SearchIcon />}\n\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\tdisabled={!!stayPoints || loading || seconds <= 0 || meters <= 0 || false}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tFind\n\t\t\t\t\t\t\t</Mui.Button>\n\t\t\t\t\t\t\t{stayPoints && <Mui.Typography variant=\"body1\">{stayPoints.length} StayPoints found</Mui.Typography>}\n\t\t\t\t\t\t\t{!stayPoints && loading && <Mui.Typography variant=\"body1\">loading...</Mui.Typography>}\n\t\t\t\t\t\t</Mui.CardActions>\n\t\t\t\t\t</Mui.Card>\n\t\t\t\t</Mui.Grid>\n\t\t\t)}\n\n\t\t\t{gpx?.tracks[0] && (\n\t\t\t\t<Mui.Grid item>\n\t\t\t\t\t<Mui.Card>\n\t\t\t\t\t\t<Mui.CardHeader title={gpx.metadata.name || gpx.tracks[0].name || ''} />\n\t\t\t\t\t\t<Mui.CardContent>\n\t\t\t\t\t\t\t<MapContainer key={key} bounds={bounds} scrollWheelZoom={false} whenReady={() => {}}>\n\t\t\t\t\t\t\t\t<TileLayer attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n\n\t\t\t\t\t\t\t\t<Polyline pathOptions={{ color: 'red' }} positions={gpx.tracks.map((track) => track.points.map((point) => [point.lat, point.lon]))} />\n\n\t\t\t\t\t\t\t\t{stayPoints &&\n\t\t\t\t\t\t\t\t\tstayPoints.map((point) => (\n\t\t\t\t\t\t\t\t\t\t<Circle center={[point.lat, point.lon]} radius={meters}>\n\t\t\t\t\t\t\t\t\t\t\t<Tooltip>\n\t\t\t\t\t\t\t\t\t\t\t\tFrom: {moment(point.arv).format('YYYY/MM/DD HH:mm:ss')}\n\t\t\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t\t\tUntil: {moment(point.lev).format('YYYY/MM/DD HH:mm:ss')}\n\t\t\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t\t\tStay: {moment.utc(moment.duration(point.lev - point.arv).asMilliseconds()).format('H[h] m[m] s[s]')}\n\t\t\t\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t\t\t</Circle>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</MapContainer>\n\t\t\t\t\t\t</Mui.CardContent>\n\t\t\t\t\t</Mui.Card>\n\t\t\t\t</Mui.Grid>\n\t\t\t)}\n\t\t</Mui.Grid>\n\t)\n}\n\nconst haversine = (p1, p2) => {\n\tconst r = 6378137\n\tconst toRad = (x) => (x * Math.PI) / 180.0\n\n\tconst lat1 = p1.latitude || p1.lat\n\tconst lng1 = p1.longitude || p1.lng || p1.lon\n\tconst lat2 = p2.latitude || p2.lat\n\tconst lng2 = p2.longitude || p2.lng || p2.lon\n\n\tconst latd = toRad(lat2 - lat1)\n\tconst lngd = toRad(lng2 - lng1)\n\n\tconst f = Math.pow(Math.sin(latd / 2.0), 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.pow(Math.sin(lngd / 2.0), 2)\n\tconst c = 2 * Math.atan2(Math.sqrt(f), Math.sqrt(1 - f))\n\n\treturn r * c\n}\n\nconst getStayPoints = (points, meters, seconds) => {\n\ttry {\n\t\t//result container\n\t\tconst stayPoints = []\n\n\t\t//for each point i (origin)\n\t\tlet i = 0\n\t\twhile (i < points.length) {\n\t\t\t//for each subsequent point j (destination)\n\t\t\tlet j = i + 1\n\t\t\twhile (j < points.length) {\n\t\t\t\t//calculate the distance (implemented with the haversine formula)\n\t\t\t\tconst dm = haversine(points[i], points[j])\n\n\t\t\t\t//if the destination falls outside the radius\n\t\t\t\tif (dm > meters) {\n\t\t\t\t\t//and the time to get there was above the threshold\n\t\t\t\t\tconst dt = (new Date(points[j].time) - new Date(points[i].time)) / 1e3\n\t\t\t\t\tif (dt > seconds) {\n\t\t\t\t\t\t//extract all the sub-points\n\t\t\t\t\t\tconst pts = points.slice(i, j)\n\n\t\t\t\t\t\t//compute the staypoint (average latitude, average longitude, arrive time, leave time)\n\t\t\t\t\t\t//and add it to the result\n\t\t\t\t\t\tstayPoints.push({\n\t\t\t\t\t\t\tlat: pts.map((point) => point.lat).reduce((acc, val) => acc + val, 0) / pts.length,\n\t\t\t\t\t\t\tlon: pts.map((point) => point.lon).reduce((acc, val) => acc + val, 0) / pts.length,\n\t\t\t\t\t\t\tarv: pts[0].time,\n\t\t\t\t\t\t\tlev: pts.slice(-1)[0].time,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\n\t\t\t\t\t//avoid re-computing subpaths\n\t\t\t\t\ti = j\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\t//iterate\n\t\t\t\tj++\n\t\t\t}\n\n\t\t\t//iterate\n\t\t\tif (j === points.length) i++\n\t\t}\n\n\t\t//return the set of computed staypoints\n\t\treturn stayPoints\n\t} catch (e) {\n\t\t//catch-all to handle bad parameters\n\t\tconsole.log(e)\n\t\treturn null\n\t}\n}\n","import Index from './views/Index'\nimport 'typeface-roboto'\n\nfunction App() {\n\treturn <Index />\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './assets/styles/styles.scss'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport App from './App'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<CssBaseline />\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n"],"sourceRoot":""}